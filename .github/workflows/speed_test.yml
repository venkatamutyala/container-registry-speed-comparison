name: 🐳 Container Registry Speed Test

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write
  packages: write

jobs:
  run-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        registry: ['ghcr.io', 'docker.io']
        image_size_mb: [8, 64, 256, 512, 1024, 2048, 3072, 4096, 5120, 6144]
        run_number: [1, 2, 3] # Run each combination 3 times for averaging

    steps:
      - name: ⬇️ Check out repository
        uses: actions/checkout@v4

      - name: 🐋 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to GHCR
        if: matrix.registry == 'ghcr.io'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 Log in to Docker Hub
        if: matrix.registry == 'docker.io'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🧪 Run Speed Tests
        run: |
          IMAGE_TAG="${{ matrix.registry }}/${{ github.repository }}:${{ matrix.image_size_mb }}mb-${{ github.run_id }}-${{ matrix.run_number }}"
          docker build --build-arg DUMMY_SIZE_MB=${{ matrix.image_size_mb }} -t $IMAGE_TAG .
          START_PUSH=$(date +%s%3N)
          docker push $IMAGE_TAG
          END_PUSH=$(date +%s%3N)
          PUSH_TIME=$((END_PUSH - START_PUSH))
          docker rmi $IMAGE_TAG
          START_COLD_PULL=$(date +%s%3N)
          docker pull $IMAGE_TAG
          END_COLD_PULL=$(date +%s%3N)
          COLD_PULL_TIME=$((END_COLD_PULL - START_COLD_PULL))
          START_WARM_PULL=$(date +%s%3N)
          docker pull $IMAGE_TAG
          END_WARM_PULL=$(date +%s%3N)
          WARM_PULL_TIME=$((END_WARM_PULL - START_WARM_PULL))
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          RESULT_LINE="$TIMESTAMP,${{ matrix.registry }},${{ matrix.image_size_mb }},$PUSH_TIME,$COLD_PULL_TIME,$WARM_PULL_TIME"
          mkdir -p individual-results
          echo "$RESULT_LINE" >> individual-results/result-${{ matrix.registry }}-${{ matrix.image_size_mb }}-${{ matrix.run_number }}.csv

      - name: 📤 Upload result as artifact
        uses: actions/upload-artifact@v4
        with:
          # Add run_number to make the name fully unique
          name: speed-test-results-${{ matrix.registry }}-${{ matrix.image_size_mb }}-${{ matrix.run_number }}
          path: individual-results/

  aggregate-and-chart:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Check out repository
        uses: actions/checkout@v4

      - name: 📥 Download all result artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 Install Python dependencies
        run: pip install pandas matplotlib

      - name: 📊 Process Data and Generate Charts
        run: python .github/scripts/generate_chart.py

      - name: 💾 Commit data and charts
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(data): Update registry performance data and charts"
          file_pattern: "results/data.csv chart-*.svg"
