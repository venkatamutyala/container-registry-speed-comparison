# .github/workflows/compare-speeds.yml

name: 📊 Compare Docker Pull Speeds

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs the job on a schedule (e.g., every day at midnight UTC)
  schedule:
    - cron: '*/5 * * * *'

jobs:
  compare-and-chart:
    runs-on: ubuntu-latest
    concurrency:
      group: limit-job-concurrency-do-not-remove
      cancel-in-progress: false
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 Install Python dependencies
        run: pip install pandas matplotlib

      - name: ⏱️ Pull images and record times
        run: |
          # --- Configuration ---
          LOG_FILE="pull_times.csv"
          IMAGES=(
            "quay.io/argoproj/argocd:latest"
            "ghcr.io/argoproj/argo-cd/argocd:3.2.0-7129a2c1"
          )

          # --- Create log file with headers if it doesn't exist ---
          if [ ! -f "$LOG_FILE" ]; then
            echo "timestamp,registry,pull_time" > "$LOG_FILE"
          fi

          # --- Loop through images, pull, and record time ---
          for IMG in "${IMAGES[@]}"; do
            echo "--- Testing image: $IMG ---"
            
            # 1. Clean up local image to ensure a fresh pull
            echo "Cleaning up local image..."
            docker rmi "$IMG" || true
            docker image prune -af

            # 2. Pull and record time using a robust method
            TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            
            # ⭐️ THIS IS THE NEW ROBUST FIX ⭐️
            # Create a temporary file to store the time measurement
            TIME_FILE=$(mktemp)
            
            # Run the pull, sending all its output to /dev/null
            # The `time` command writes its result directly to the temp file
            /usr/bin/time -f "%e" -o "$TIME_FILE" docker pull "$IMG" > /dev/null 2>&1
            
            # Read the clean time measurement from the temp file
            PULL_TIME=$(cat "$TIME_FILE")
            
            # Clean up the temp file
            rm "$TIME_FILE"
            
            # 3. Extract registry name for the log
            REGISTRY=$(echo "$IMG" | cut -d'/' -f1)
            
            # 4. Append result to CSV
            echo "$TIMESTAMP,$REGISTRY,$PULL_TIME" >> "$LOG_FILE"
            echo "Pull time for $REGISTRY was $PULL_TIME seconds."
          done

      - name: 📈 Generate plot from data
        run: |
          cat << EOF > plot_chart.py
          import pandas as pd
          import matplotlib.pyplot as plt

          # Load and prepare the data
          try:
              df = pd.read_csv('pull_times.csv')
              if df.empty:
                  print("Log file is empty. Skipping chart generation.")
                  exit(0)
              df['timestamp'] = pd.to_datetime(df['timestamp'])
              df.sort_values('timestamp', inplace=True)
          except FileNotFoundError:
              print("Log file not found. Skipping chart generation.")
              exit(0)
          except Exception as e:
              print(f"Error processing CSV: {e}")
              print("CSV content:")
              with open('pull_times.csv', 'r') as f:
                  print(f.read())
              exit(1)

          # Pivot the data for plotting
          pivot_df = df.pivot(index='timestamp', columns='registry', values='pull_time')

          # Create the plot
          fig, ax = plt.subplots(figsize=(10, 6))
          pivot_df.plot(ax=ax, marker='o', linestyle='-')

          # Formatting
          ax.set_title('Docker Pull Speed Comparison (Lower is Better)')
          ax.set_xlabel('Date')
          ax.set_ylabel('Pull Time (seconds)')
          ax.legend(title='Registry')
          ax.grid(True, which='both', linestyle='--', linewidth=0.5)
          plt.xticks(rotation=25)
          plt.tight_layout()

          # Save the plot as an SVG file
          plt.savefig('pull_speed_chart.svg', format='svg')
          print("SVG chart generated successfully.")
          EOF

          python plot_chart.py

      - name: 💾 Commit and push results
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add pull_times.csv pull_speed_chart.svg
          
          # Commit only if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "📊 Update pull speed data and chart"
            git push
          else
            echo "No changes to commit."
          fi
