name: 🐳 Container Registry Speed Test

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write
  packages: write

jobs:
  run-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        registry: ['ghcr.io', 'docker.io']
        image_size_mb: [8, 64, 256, 512, 1024]

    steps:
      - name: ⬇️ Check out repository
        uses: actions/checkout@v4

      - name: 📝 Initialize results file with header
        run: |
          mkdir -p results
          if [ ! -f results/data.csv ]; then
            echo "Timestamp,Registry,SizeMB,PushTime,ColdPullTime,WarmPullTime" > results/data.csv
          fi

      - name: 🐋 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to GHCR
        if: matrix.registry == 'ghcr.io'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 Log in to Docker Hub
        if: matrix.registry == 'docker.io'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🧪 Run Speed Tests
        run: |
          IMAGE_TAG="${{ matrix.registry }}/${{ github.repository }}:${{ matrix.image_size_mb }}mb-${{ github.run_id }}"
          echo "Testing with image: $IMAGE_TAG of size ${{ matrix.image_size_mb }}MB"
          docker build --build-arg DUMMY_SIZE_MB=${{ matrix.image_size_mb }} -t $IMAGE_TAG .
          START_PUSH=$(date +%s%3N)
          docker push $IMAGE_TAG
          END_PUSH=$(date +%s%3N)
          PUSH_TIME=$((END_PUSH - START_PUSH))
          docker rmi $IMAGE_TAG
          START_COLD_PULL=$(date +%s%3N)
          docker pull $IMAGE_TAG
          END_COLD_PULL=$(date +%s%3N)
          COLD_PULL_TIME=$((END_COLD_PULL - START_COLD_PULL))
          START_WARM_PULL=$(date +%s%3N)
          docker pull $IMAGE_TAG
          END_WARM_PULL=$(date +%s%3N)
          WARM_PULL_TIME=$((END_WARM_PULL - START_WARM_PULL))
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          RESULT_LINE="$TIMESTAMP,${{ matrix.registry }},${{ matrix.image_size_mb }},$PUSH_TIME,$COLD_PULL_TIME,$WARM_PULL_TIME"
          mkdir -p individual-results
          echo "$RESULT_LINE" >> individual-results/result-${{ matrix.registry }}-${{ matrix.image_size_mb }}mb.csv

      - name: 📤 Upload result as artifact
        uses: actions/upload-artifact@v4
        with:
          name: speed-test-results-${{ matrix.registry }}-${{ matrix.image_size_mb }}
          path: individual-results/

  aggregate-and-chart:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Check out repository
        uses: actions/checkout@v4

      - name: 📥 Download all result artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results

      - name: 🗂️ Aggregate results into main data file
        run: |
          # Append all new results from the downloaded artifacts to the historical data file
          cat all-results/**/*.csv >> results/data.csv
          # Use tail + sort to keep header and sort data, then save
          (head -n 1 results/data.csv && tail -n +2 results/data.csv | sort -u) > results/data.sorted.csv && mv results/data.sorted.csv results/data.csv

      - name: 💾 Commit aggregated data
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(data): Add new registry speed test results"
          file_pattern: "results/data.csv"

      - name: 📊 Generate Push Performance Chart
        uses: MatteoH2
